== Physical Plan ==
TakeOrderedAndProject (72)
+- * Project (71)
   +- * BroadcastHashJoin Inner BuildRight (70)
      :- * Project (53)
      :  +- * BroadcastHashJoin Inner BuildRight (52)
      :     :- * BroadcastHashJoin Inner BuildRight (33)
      :     :  :- * Filter (16)
      :     :  :  +- * HashAggregate (15)
      :     :  :     +- Exchange (14)
      :     :  :        +- * HashAggregate (13)
      :     :  :           +- * Project (12)
      :     :  :              +- * BroadcastHashJoin Inner BuildRight (11)
      :     :  :                 :- * Project (9)
      :     :  :                 :  +- * BroadcastHashJoin Inner BuildRight (8)
      :     :  :                 :     :- * Filter (3)
      :     :  :                 :     :  +- * ColumnarToRow (2)
      :     :  :                 :     :     +- Scan parquet default.customer (1)
      :     :  :                 :     +- BroadcastExchange (7)
      :     :  :                 :        +- * Filter (6)
      :     :  :                 :           +- * ColumnarToRow (5)
      :     :  :                 :              +- Scan parquet default.store_sales (4)
      :     :  :                 +- ReusedExchange (10)
      :     :  +- BroadcastExchange (32)
      :     :     +- * HashAggregate (31)
      :     :        +- Exchange (30)
      :     :           +- * HashAggregate (29)
      :     :              +- * Project (28)
      :     :                 +- * BroadcastHashJoin Inner BuildRight (27)
      :     :                    :- * Project (25)
      :     :                    :  +- * BroadcastHashJoin Inner BuildRight (24)
      :     :                    :     :- * Filter (19)
      :     :                    :     :  +- * ColumnarToRow (18)
      :     :                    :     :     +- Scan parquet default.customer (17)
      :     :                    :     +- BroadcastExchange (23)
      :     :                    :        +- * Filter (22)
      :     :                    :           +- * ColumnarToRow (21)
      :     :                    :              +- Scan parquet default.store_sales (20)
      :     :                    +- ReusedExchange (26)
      :     +- BroadcastExchange (51)
      :        +- * Project (50)
      :           +- * Filter (49)
      :              +- * HashAggregate (48)
      :                 +- Exchange (47)
      :                    +- * HashAggregate (46)
      :                       +- * Project (45)
      :                          +- * BroadcastHashJoin Inner BuildRight (44)
      :                             :- * Project (42)
      :                             :  +- * BroadcastHashJoin Inner BuildRight (41)
      :                             :     :- * Filter (36)
      :                             :     :  +- * ColumnarToRow (35)
      :                             :     :     +- Scan parquet default.customer (34)
      :                             :     +- BroadcastExchange (40)
      :                             :        +- * Filter (39)
      :                             :           +- * ColumnarToRow (38)
      :                             :              +- Scan parquet default.web_sales (37)
      :                             +- ReusedExchange (43)
      +- BroadcastExchange (69)
         +- * HashAggregate (68)
            +- Exchange (67)
               +- * HashAggregate (66)
                  +- * Project (65)
                     +- * BroadcastHashJoin Inner BuildRight (64)
                        :- * Project (62)
                        :  +- * BroadcastHashJoin Inner BuildRight (61)
                        :     :- * Filter (56)
                        :     :  +- * ColumnarToRow (55)
                        :     :     +- Scan parquet default.customer (54)
                        :     +- BroadcastExchange (60)
                        :        +- * Filter (59)
                        :           +- * ColumnarToRow (58)
                        :              +- Scan parquet default.web_sales (57)
                        +- ReusedExchange (63)


(1) Scan parquet default.customer
Output [4]: [c_customer_sk#1, c_customer_id#2, c_first_name#3, c_last_name#4]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer]
PushedFilters: [IsNotNull(c_customer_sk), IsNotNull(c_customer_id)]
ReadSchema: struct<c_customer_sk:int,c_customer_id:string,c_first_name:string,c_last_name:string>

(2) ColumnarToRow [codegen id : 3]
Input [4]: [c_customer_sk#1, c_customer_id#2, c_first_name#3, c_last_name#4]

(3) Filter [codegen id : 3]
Input [4]: [c_customer_sk#1, c_customer_id#2, c_first_name#3, c_last_name#4]
Condition : (isnotnull(c_customer_sk#1) AND isnotnull(c_customer_id#2))

(4) Scan parquet default.store_sales
Output [3]: [ss_customer_sk#5, ss_net_paid#6, ss_sold_date_sk#7]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#7), dynamicpruningexpression(ss_sold_date_sk#7 IN dynamicpruning#8)]
PushedFilters: [IsNotNull(ss_customer_sk)]
ReadSchema: struct<ss_customer_sk:int,ss_net_paid:decimal(7,2)>

(5) ColumnarToRow [codegen id : 1]
Input [3]: [ss_customer_sk#5, ss_net_paid#6, ss_sold_date_sk#7]

(6) Filter [codegen id : 1]
Input [3]: [ss_customer_sk#5, ss_net_paid#6, ss_sold_date_sk#7]
Condition : isnotnull(ss_customer_sk#5)

(7) BroadcastExchange
Input [3]: [ss_customer_sk#5, ss_net_paid#6, ss_sold_date_sk#7]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#9]

(8) BroadcastHashJoin [codegen id : 3]
Left keys [1]: [c_customer_sk#1]
Right keys [1]: [ss_customer_sk#5]
Join condition: None

(9) Project [codegen id : 3]
Output [5]: [c_customer_id#2, c_first_name#3, c_last_name#4, ss_net_paid#6, ss_sold_date_sk#7]
Input [7]: [c_customer_sk#1, c_customer_id#2, c_first_name#3, c_last_name#4, ss_customer_sk#5, ss_net_paid#6, ss_sold_date_sk#7]

(10) ReusedExchange [Reuses operator id: 76]
Output [2]: [d_date_sk#10, d_year#11]

(11) BroadcastHashJoin [codegen id : 3]
Left keys [1]: [ss_sold_date_sk#7]
Right keys [1]: [d_date_sk#10]
Join condition: None

(12) Project [codegen id : 3]
Output [5]: [c_customer_id#2, c_first_name#3, c_last_name#4, ss_net_paid#6, d_year#11]
Input [7]: [c_customer_id#2, c_first_name#3, c_last_name#4, ss_net_paid#6, ss_sold_date_sk#7, d_date_sk#10, d_year#11]

(13) HashAggregate [codegen id : 3]
Input [5]: [c_customer_id#2, c_first_name#3, c_last_name#4, ss_net_paid#6, d_year#11]
Keys [4]: [c_customer_id#2, c_first_name#3, c_last_name#4, d_year#11]
Functions [1]: [partial_sum(UnscaledValue(ss_net_paid#6))]
Aggregate Attributes [1]: [sum#12]
Results [5]: [c_customer_id#2, c_first_name#3, c_last_name#4, d_year#11, sum#13]

(14) Exchange
Input [5]: [c_customer_id#2, c_first_name#3, c_last_name#4, d_year#11, sum#13]
Arguments: hashpartitioning(c_customer_id#2, c_first_name#3, c_last_name#4, d_year#11, 5), ENSURE_REQUIREMENTS, [id=#14]

(15) HashAggregate [codegen id : 16]
Input [5]: [c_customer_id#2, c_first_name#3, c_last_name#4, d_year#11, sum#13]
Keys [4]: [c_customer_id#2, c_first_name#3, c_last_name#4, d_year#11]
Functions [1]: [sum(UnscaledValue(ss_net_paid#6))]
Aggregate Attributes [1]: [sum(UnscaledValue(ss_net_paid#6))#15]
Results [2]: [c_customer_id#2 AS customer_id#16, MakeDecimal(sum(UnscaledValue(ss_net_paid#6))#15,17,2) AS year_total#17]

(16) Filter [codegen id : 16]
Input [2]: [customer_id#16, year_total#17]
Condition : (isnotnull(year_total#17) AND (year_total#17 > 0.00))

(17) Scan parquet default.customer
Output [4]: [c_customer_sk#18, c_customer_id#19, c_first_name#20, c_last_name#21]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer]
PushedFilters: [IsNotNull(c_customer_sk), IsNotNull(c_customer_id)]
ReadSchema: struct<c_customer_sk:int,c_customer_id:string,c_first_name:string,c_last_name:string>

(18) ColumnarToRow [codegen id : 6]
Input [4]: [c_customer_sk#18, c_customer_id#19, c_first_name#20, c_last_name#21]

(19) Filter [codegen id : 6]
Input [4]: [c_customer_sk#18, c_customer_id#19, c_first_name#20, c_last_name#21]
Condition : (isnotnull(c_customer_sk#18) AND isnotnull(c_customer_id#19))

(20) Scan parquet default.store_sales
Output [3]: [ss_customer_sk#22, ss_net_paid#23, ss_sold_date_sk#24]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#24), dynamicpruningexpression(ss_sold_date_sk#24 IN dynamicpruning#25)]
PushedFilters: [IsNotNull(ss_customer_sk)]
ReadSchema: struct<ss_customer_sk:int,ss_net_paid:decimal(7,2)>

(21) ColumnarToRow [codegen id : 4]
Input [3]: [ss_customer_sk#22, ss_net_paid#23, ss_sold_date_sk#24]

(22) Filter [codegen id : 4]
Input [3]: [ss_customer_sk#22, ss_net_paid#23, ss_sold_date_sk#24]
Condition : isnotnull(ss_customer_sk#22)

(23) BroadcastExchange
Input [3]: [ss_customer_sk#22, ss_net_paid#23, ss_sold_date_sk#24]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#26]

(24) BroadcastHashJoin [codegen id : 6]
Left keys [1]: [c_customer_sk#18]
Right keys [1]: [ss_customer_sk#22]
Join condition: None

(25) Project [codegen id : 6]
Output [5]: [c_customer_id#19, c_first_name#20, c_last_name#21, ss_net_paid#23, ss_sold_date_sk#24]
Input [7]: [c_customer_sk#18, c_customer_id#19, c_first_name#20, c_last_name#21, ss_customer_sk#22, ss_net_paid#23, ss_sold_date_sk#24]

(26) ReusedExchange [Reuses operator id: 80]
Output [2]: [d_date_sk#27, d_year#28]

(27) BroadcastHashJoin [codegen id : 6]
Left keys [1]: [ss_sold_date_sk#24]
Right keys [1]: [d_date_sk#27]
Join condition: None

(28) Project [codegen id : 6]
Output [5]: [c_customer_id#19, c_first_name#20, c_last_name#21, ss_net_paid#23, d_year#28]
Input [7]: [c_customer_id#19, c_first_name#20, c_last_name#21, ss_net_paid#23, ss_sold_date_sk#24, d_date_sk#27, d_year#28]

(29) HashAggregate [codegen id : 6]
Input [5]: [c_customer_id#19, c_first_name#20, c_last_name#21, ss_net_paid#23, d_year#28]
Keys [4]: [c_customer_id#19, c_first_name#20, c_last_name#21, d_year#28]
Functions [1]: [partial_sum(UnscaledValue(ss_net_paid#23))]
Aggregate Attributes [1]: [sum#29]
Results [5]: [c_customer_id#19, c_first_name#20, c_last_name#21, d_year#28, sum#30]

(30) Exchange
Input [5]: [c_customer_id#19, c_first_name#20, c_last_name#21, d_year#28, sum#30]
Arguments: hashpartitioning(c_customer_id#19, c_first_name#20, c_last_name#21, d_year#28, 5), ENSURE_REQUIREMENTS, [id=#31]

(31) HashAggregate [codegen id : 7]
Input [5]: [c_customer_id#19, c_first_name#20, c_last_name#21, d_year#28, sum#30]
Keys [4]: [c_customer_id#19, c_first_name#20, c_last_name#21, d_year#28]
Functions [1]: [sum(UnscaledValue(ss_net_paid#23))]
Aggregate Attributes [1]: [sum(UnscaledValue(ss_net_paid#23))#15]
Results [4]: [c_customer_id#19 AS customer_id#32, c_first_name#20 AS customer_first_name#33, c_last_name#21 AS customer_last_name#34, MakeDecimal(sum(UnscaledValue(ss_net_paid#23))#15,17,2) AS year_total#35]

(32) BroadcastExchange
Input [4]: [customer_id#32, customer_first_name#33, customer_last_name#34, year_total#35]
Arguments: HashedRelationBroadcastMode(List(input[0, string, true]),false), [id=#36]

(33) BroadcastHashJoin [codegen id : 16]
Left keys [1]: [customer_id#16]
Right keys [1]: [customer_id#32]
Join condition: None

(34) Scan parquet default.customer
Output [4]: [c_customer_sk#37, c_customer_id#38, c_first_name#39, c_last_name#40]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer]
PushedFilters: [IsNotNull(c_customer_sk), IsNotNull(c_customer_id)]
ReadSchema: struct<c_customer_sk:int,c_customer_id:string,c_first_name:string,c_last_name:string>

(35) ColumnarToRow [codegen id : 10]
Input [4]: [c_customer_sk#37, c_customer_id#38, c_first_name#39, c_last_name#40]

(36) Filter [codegen id : 10]
Input [4]: [c_customer_sk#37, c_customer_id#38, c_first_name#39, c_last_name#40]
Condition : (isnotnull(c_customer_sk#37) AND isnotnull(c_customer_id#38))

(37) Scan parquet default.web_sales
Output [3]: [ws_bill_customer_sk#41, ws_net_paid#42, ws_sold_date_sk#43]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ws_sold_date_sk#43), dynamicpruningexpression(ws_sold_date_sk#43 IN dynamicpruning#8)]
PushedFilters: [IsNotNull(ws_bill_customer_sk)]
ReadSchema: struct<ws_bill_customer_sk:int,ws_net_paid:decimal(7,2)>

(38) ColumnarToRow [codegen id : 8]
Input [3]: [ws_bill_customer_sk#41, ws_net_paid#42, ws_sold_date_sk#43]

(39) Filter [codegen id : 8]
Input [3]: [ws_bill_customer_sk#41, ws_net_paid#42, ws_sold_date_sk#43]
Condition : isnotnull(ws_bill_customer_sk#41)

(40) BroadcastExchange
Input [3]: [ws_bill_customer_sk#41, ws_net_paid#42, ws_sold_date_sk#43]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#44]

(41) BroadcastHashJoin [codegen id : 10]
Left keys [1]: [c_customer_sk#37]
Right keys [1]: [ws_bill_customer_sk#41]
Join condition: None

(42) Project [codegen id : 10]
Output [5]: [c_customer_id#38, c_first_name#39, c_last_name#40, ws_net_paid#42, ws_sold_date_sk#43]
Input [7]: [c_customer_sk#37, c_customer_id#38, c_first_name#39, c_last_name#40, ws_bill_customer_sk#41, ws_net_paid#42, ws_sold_date_sk#43]

(43) ReusedExchange [Reuses operator id: 76]
Output [2]: [d_date_sk#45, d_year#46]

(44) BroadcastHashJoin [codegen id : 10]
Left keys [1]: [ws_sold_date_sk#43]
Right keys [1]: [d_date_sk#45]
Join condition: None

(45) Project [codegen id : 10]
Output [5]: [c_customer_id#38, c_first_name#39, c_last_name#40, ws_net_paid#42, d_year#46]
Input [7]: [c_customer_id#38, c_first_name#39, c_last_name#40, ws_net_paid#42, ws_sold_date_sk#43, d_date_sk#45, d_year#46]

(46) HashAggregate [codegen id : 10]
Input [5]: [c_customer_id#38, c_first_name#39, c_last_name#40, ws_net_paid#42, d_year#46]
Keys [4]: [c_customer_id#38, c_first_name#39, c_last_name#40, d_year#46]
Functions [1]: [partial_sum(UnscaledValue(ws_net_paid#42))]
Aggregate Attributes [1]: [sum#47]
Results [5]: [c_customer_id#38, c_first_name#39, c_last_name#40, d_year#46, sum#48]

(47) Exchange
Input [5]: [c_customer_id#38, c_first_name#39, c_last_name#40, d_year#46, sum#48]
Arguments: hashpartitioning(c_customer_id#38, c_first_name#39, c_last_name#40, d_year#46, 5), ENSURE_REQUIREMENTS, [id=#49]

(48) HashAggregate [codegen id : 11]
Input [5]: [c_customer_id#38, c_first_name#39, c_last_name#40, d_year#46, sum#48]
Keys [4]: [c_customer_id#38, c_first_name#39, c_last_name#40, d_year#46]
Functions [1]: [sum(UnscaledValue(ws_net_paid#42))]
Aggregate Attributes [1]: [sum(UnscaledValue(ws_net_paid#42))#50]
Results [2]: [c_customer_id#38 AS customer_id#51, MakeDecimal(sum(UnscaledValue(ws_net_paid#42))#50,17,2) AS year_total#52]

(49) Filter [codegen id : 11]
Input [2]: [customer_id#51, year_total#52]
Condition : (isnotnull(year_total#52) AND (year_total#52 > 0.00))

(50) Project [codegen id : 11]
Output [2]: [customer_id#51 AS customer_id#53, year_total#52 AS year_total#54]
Input [2]: [customer_id#51, year_total#52]

(51) BroadcastExchange
Input [2]: [customer_id#53, year_total#54]
Arguments: HashedRelationBroadcastMode(List(input[0, string, true]),false), [id=#55]

(52) BroadcastHashJoin [codegen id : 16]
Left keys [1]: [customer_id#16]
Right keys [1]: [customer_id#53]
Join condition: None

(53) Project [codegen id : 16]
Output [7]: [customer_id#16, year_total#17, customer_id#32, customer_first_name#33, customer_last_name#34, year_total#35, year_total#54]
Input [8]: [customer_id#16, year_total#17, customer_id#32, customer_first_name#33, customer_last_name#34, year_total#35, customer_id#53, year_total#54]

(54) Scan parquet default.customer
Output [4]: [c_customer_sk#56, c_customer_id#57, c_first_name#58, c_last_name#59]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer]
PushedFilters: [IsNotNull(c_customer_sk), IsNotNull(c_customer_id)]
ReadSchema: struct<c_customer_sk:int,c_customer_id:string,c_first_name:string,c_last_name:string>

(55) ColumnarToRow [codegen id : 14]
Input [4]: [c_customer_sk#56, c_customer_id#57, c_first_name#58, c_last_name#59]

(56) Filter [codegen id : 14]
Input [4]: [c_customer_sk#56, c_customer_id#57, c_first_name#58, c_last_name#59]
Condition : (isnotnull(c_customer_sk#56) AND isnotnull(c_customer_id#57))

(57) Scan parquet default.web_sales
Output [3]: [ws_bill_customer_sk#60, ws_net_paid#61, ws_sold_date_sk#62]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ws_sold_date_sk#62), dynamicpruningexpression(ws_sold_date_sk#62 IN dynamicpruning#25)]
PushedFilters: [IsNotNull(ws_bill_customer_sk)]
ReadSchema: struct<ws_bill_customer_sk:int,ws_net_paid:decimal(7,2)>

(58) ColumnarToRow [codegen id : 12]
Input [3]: [ws_bill_customer_sk#60, ws_net_paid#61, ws_sold_date_sk#62]

(59) Filter [codegen id : 12]
Input [3]: [ws_bill_customer_sk#60, ws_net_paid#61, ws_sold_date_sk#62]
Condition : isnotnull(ws_bill_customer_sk#60)

(60) BroadcastExchange
Input [3]: [ws_bill_customer_sk#60, ws_net_paid#61, ws_sold_date_sk#62]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#63]

(61) BroadcastHashJoin [codegen id : 14]
Left keys [1]: [c_customer_sk#56]
Right keys [1]: [ws_bill_customer_sk#60]
Join condition: None

(62) Project [codegen id : 14]
Output [5]: [c_customer_id#57, c_first_name#58, c_last_name#59, ws_net_paid#61, ws_sold_date_sk#62]
Input [7]: [c_customer_sk#56, c_customer_id#57, c_first_name#58, c_last_name#59, ws_bill_customer_sk#60, ws_net_paid#61, ws_sold_date_sk#62]

(63) ReusedExchange [Reuses operator id: 80]
Output [2]: [d_date_sk#64, d_year#65]

(64) BroadcastHashJoin [codegen id : 14]
Left keys [1]: [ws_sold_date_sk#62]
Right keys [1]: [d_date_sk#64]
Join condition: None

(65) Project [codegen id : 14]
Output [5]: [c_customer_id#57, c_first_name#58, c_last_name#59, ws_net_paid#61, d_year#65]
Input [7]: [c_customer_id#57, c_first_name#58, c_last_name#59, ws_net_paid#61, ws_sold_date_sk#62, d_date_sk#64, d_year#65]

(66) HashAggregate [codegen id : 14]
Input [5]: [c_customer_id#57, c_first_name#58, c_last_name#59, ws_net_paid#61, d_year#65]
Keys [4]: [c_customer_id#57, c_first_name#58, c_last_name#59, d_year#65]
Functions [1]: [partial_sum(UnscaledValue(ws_net_paid#61))]
Aggregate Attributes [1]: [sum#66]
Results [5]: [c_customer_id#57, c_first_name#58, c_last_name#59, d_year#65, sum#67]

(67) Exchange
Input [5]: [c_customer_id#57, c_first_name#58, c_last_name#59, d_year#65, sum#67]
Arguments: hashpartitioning(c_customer_id#57, c_first_name#58, c_last_name#59, d_year#65, 5), ENSURE_REQUIREMENTS, [id=#68]

(68) HashAggregate [codegen id : 15]
Input [5]: [c_customer_id#57, c_first_name#58, c_last_name#59, d_year#65, sum#67]
Keys [4]: [c_customer_id#57, c_first_name#58, c_last_name#59, d_year#65]
Functions [1]: [sum(UnscaledValue(ws_net_paid#61))]
Aggregate Attributes [1]: [sum(UnscaledValue(ws_net_paid#61))#50]
Results [2]: [c_customer_id#57 AS customer_id#69, MakeDecimal(sum(UnscaledValue(ws_net_paid#61))#50,17,2) AS year_total#70]

(69) BroadcastExchange
Input [2]: [customer_id#69, year_total#70]
Arguments: HashedRelationBroadcastMode(List(input[0, string, true]),false), [id=#71]

(70) BroadcastHashJoin [codegen id : 16]
Left keys [1]: [customer_id#16]
Right keys [1]: [customer_id#69]
Join condition: (CASE WHEN (year_total#54 > 0.00) THEN CheckOverflow((promote_precision(year_total#70) / promote_precision(year_total#54)), DecimalType(37,20), true) END > CASE WHEN (year_total#17 > 0.00) THEN CheckOverflow((promote_precision(year_total#35) / promote_precision(year_total#17)), DecimalType(37,20), true) END)

(71) Project [codegen id : 16]
Output [3]: [customer_id#32, customer_first_name#33, customer_last_name#34]
Input [9]: [customer_id#16, year_total#17, customer_id#32, customer_first_name#33, customer_last_name#34, year_total#35, year_total#54, customer_id#69, year_total#70]

(72) TakeOrderedAndProject
Input [3]: [customer_id#32, customer_first_name#33, customer_last_name#34]
Arguments: 100, [customer_first_name#33 ASC NULLS FIRST, customer_id#32 ASC NULLS FIRST, customer_last_name#34 ASC NULLS FIRST], [customer_id#32, customer_first_name#33, customer_last_name#34]

===== Subqueries =====

Subquery:1 Hosting operator id = 4 Hosting Expression = ss_sold_date_sk#7 IN dynamicpruning#8
BroadcastExchange (76)
+- * Filter (75)
   +- * ColumnarToRow (74)
      +- Scan parquet default.date_dim (73)


(73) Scan parquet default.date_dim
Output [2]: [d_date_sk#10, d_year#11]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), EqualTo(d_year,2001), In(d_year, [2001,2002]), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int>

(74) ColumnarToRow [codegen id : 1]
Input [2]: [d_date_sk#10, d_year#11]

(75) Filter [codegen id : 1]
Input [2]: [d_date_sk#10, d_year#11]
Condition : (((isnotnull(d_year#11) AND (d_year#11 = 2001)) AND d_year#11 IN (2001,2002)) AND isnotnull(d_date_sk#10))

(76) BroadcastExchange
Input [2]: [d_date_sk#10, d_year#11]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#72]

Subquery:2 Hosting operator id = 20 Hosting Expression = ss_sold_date_sk#24 IN dynamicpruning#25
BroadcastExchange (80)
+- * Filter (79)
   +- * ColumnarToRow (78)
      +- Scan parquet default.date_dim (77)


(77) Scan parquet default.date_dim
Output [2]: [d_date_sk#27, d_year#28]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), EqualTo(d_year,2002), In(d_year, [2001,2002]), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int>

(78) ColumnarToRow [codegen id : 1]
Input [2]: [d_date_sk#27, d_year#28]

(79) Filter [codegen id : 1]
Input [2]: [d_date_sk#27, d_year#28]
Condition : (((isnotnull(d_year#28) AND (d_year#28 = 2002)) AND d_year#28 IN (2001,2002)) AND isnotnull(d_date_sk#27))

(80) BroadcastExchange
Input [2]: [d_date_sk#27, d_year#28]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#73]

Subquery:3 Hosting operator id = 37 Hosting Expression = ws_sold_date_sk#43 IN dynamicpruning#8

Subquery:4 Hosting operator id = 57 Hosting Expression = ws_sold_date_sk#62 IN dynamicpruning#25


